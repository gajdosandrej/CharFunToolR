% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Hypergeom1F1MatApprox.R
\name{Hypergeom1F1MatApprox}
\alias{Hypergeom1F1MatApprox}
\title{Computes the approximation of the confluent hypergeometric function \eqn{1F1(a,b,X)} of a matrix argument}
\usage{
Hypergeom1F1MatApprox(a, b, X)
}
\arguments{
\item{a}{complex vector of parameters of the hypergeometric function \eqn{1F1(a;b;X)}.}

\item{b}{complex vector of parameters  of the hypergeometric function \eqn{1F1(a;b;X)}.}

\item{X}{real symmetric \eqn{(p x p)}-matrix argument (alternatively can be specified
as a \eqn{(p x p)}-diagonal matrix or a \eqn{p}-vector of the eigenvalues of \code{X}), i.e. \eqn{x = eig(X)}.}
}
\value{
(Approximate) value of the confluent hypergeometric function \eqn{1F1(a;b;X)}, of a matrix argument \code{X}.
}
\description{
\code{Hypergeom1F1MatApprox(a, b, X)} computes the approximation of the confluent
hypergeometric function \eqn{1F1(a,b,X)} of a matrix argument, defined for the complex parameters \code{a} and \code{b},
with \eqn{Re(a) > (p-1)/2} and  \eqn{Re(b-a) > (p-1)/2}, and a REAL symmetric \eqn{(p x p)}-matrix argument \code{X}.

In fact, \eqn{1F1(a,b,X)} depends only on the eigenvalues of \eqn{X}, so \eqn{X} could be specified
as a \eqn{(p x p)}-diagonal matrix or a \eqn{p}-dimensional vector of eigenvalues of the original matrix \eqn{X}, say \eqn{x}.

Based on heuristic arguments (not formally proved yet), the value of the confluent
hypergeometric function \eqn{1F1(a,b,X)} of a matrix argument is calculated as
\eqn{1F1(a;b;X) ~ 1F1(a;b;x(1)) * ... * 1F1(a;b;x(p))},
where \eqn{1F1(a;b;x(1))} is the scalar value confluent hypergeometric
function \eqn{1F1(a,b,x(i))} with \eqn{[x(1),...,x(p)] = eig(X)}.

Here the confluent hypergeometric function \eqn{1F1(a;b;z)} is evaluated for the vector
parameters \code{a} and \code{b} and the scalar argument \code{z} by using the simple (4-step) series expansion.
}
\note{
Ver.: 06-Oct-2018 18:45:44 (consistent with Matlab CharFunTool v1.3.0, 19-Jul-2018 16:11:57).
}
\examples{
## EXAMPLE 1
a <- 3
b <- 5
c <-
X <- c(1, 2)
f <- Hypergeom1F1MatApprox(a, b, X)

## EXAMPLE 2
# PDF/CDF of minus log Wilks Lambda RV (p=10, n=30, q=5) from its CF
# Here, cf_LogRV_WilksLambdaNC id based on using Hypergeom1F1MatApprox
p <- 10
n <- 30
q <- 5
Delta <- c(1, 2, 3, 10, 50) # nonzero eigenvalues of non-centrality matrix
coef <- -1
cf <- function(t) cf_LogRV_WilksLambdaNC(t, p, n, q, Delta, coef)
prob <- c(0.9, 0.95, 0.99)
options <- list()
options$xMin <- 0
result <- cf2DistGP(cf, prob = prob, options = options)
}
\seealso{
Other Utility Function: 
\code{\link{ChebCoefficients}()},
\code{\link{ChebPoints}()},
\code{\link{ChebPolyValues}()},
\code{\link{ChebPoly}()},
\code{\link{ChebValues}()},
\code{\link{GammaLog}()},
\code{\link{GammaMultiLog}()},
\code{\link{GammaMulti}()},
\code{\link{GammaZX}()},
\code{\link{Hypergeom1F1Mat}()},
\code{\link{Hypergeom2F1Mat}()},
\code{\link{Hypergeom2F1}()},
\code{\link{HypergeompFqMat}()},
\code{\link{InterpChebValues}()},
\code{\link{hypergeom1F1}()},
\code{\link{interpBarycentric}()}
}
\concept{Utility Function}
