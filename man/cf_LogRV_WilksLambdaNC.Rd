% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cf_LogRV_WilksLambdaNC.R
\name{cf_LogRV_WilksLambdaNC}
\alias{cf_LogRV_WilksLambdaNC}
\title{Characteristic function of a linear combination
of independent LOG-TRANSFORMED WILK's LAMBDA distributed random variables}
\usage{
cf_LogRV_WilksLambdaNC(t, p, n, q, delta, coef, MAX)
}
\arguments{
\item{t}{vector or array of real values, where the CF is evaluated.}

\item{p}{vector of the dimension parameters \eqn{p = (p_1,...,p_N)}.
If empty, default value is \code{p = (1,...,1)}.}

\item{n}{vector of degrees of freedom of the Wishart matrices \eqn{E_i},
\eqn{n = (n_1,...,n_N)}. If empty, default value is \code{n = (1,...,1)}.}

\item{q}{vector of degrees of freedom of the Wishart matrices \eqn{H_i},
\eqn{q = (q_1,...,q_N)}. If empty, default value is \code{q = (1,...,1)}.}

\item{delta}{p.s.d. matrix or vector of nonnegative eigenvalues or
array of matrices or vectors of eigenvalues of the non-centrality parameters,
\eqn{delta = (delta_1,...,delta_N)}. Default value is an empty array.}

\item{coef}{vector of the coefficients of the linear combination of the log-transformed random variables.
If coef is scalar, it is assumed that all coefficients are equal.
If empty, default value is \code{coef = 1}.}

\item{MAX}{the maximum number of partitions used for computing
the hypergeometric \eqn{1F1} function with matrix argument, for more details see \code{HypergeompFqMat}.
If MAX is empty, default value is set to \code{MAX = 0}. If \code{MAX = 0},
then the algorithm uses the fast (approximate) method for computing the confluent
hypergeometric function \eqn{1F1(a;b;X)}, see \code{Hypergeom1F1MatApprox},
otherwise the algorithm uses the algorithm \code{Hypergeom1F1Mat}
based on computing the truncated expansion series of \eqn{1F1(a;b;X)} with \eqn{MAX} number of partitions.}
}
\value{
Characteristic function \eqn{cf(t)} of a linear combination of independent
LOG-TRANSFORMED WILK's LAMBDA distributed random variables.
}
\description{
\code{cf_LogRV_WilksLambdaNC(t, p, n, q, delta, coef, MAX)} evaluates
characteristic function of a linear combination (resp. convolution)
of independent LOG-TRANSFORMED WILK's LAMBDA distributed random variables,
with non-central distributions specified by the parameters \code{p, n, q},
the non-centrality parameters \code{delta}, and the coefficients \code{coef}.

That is, \code{cf_LogRV_WilksLambdaNC} evaluates the characteristic function
of a random variable \eqn{Y  = coef_1*W_1 +...+ coef_N*W_N, such that cf_Y(t) = cf_W_1(coef_1*t) *...* cf_W_N(coef_N*t)},
where \eqn{cf_W_i(t)} is CF of \eqn{W_i = log(Lambda_i)}, and each Lambda_i has non-central WILK's LAMBDA distribution,
\eqn{Lambda_i ~ Lambda(p_i,m_i,n_i,delta_i)}, for \eqn{i = 1,...,N}.

In particular, \eqn{\Lambda_i = det(E_i)/det(E_i + H_i)}, with  \eqn{E_i} and \eqn{H _i}
being independent random matrices with Wishart distributions, \eqn{E_i ~ Wp_i(m_i,\Sigma_i)}
with central Wishart distribution, and \eqn{H_i ~ Wp_i(n_i,\Sigma_i,delta)} with non-central Wishart distribution,
with \eqn{n_i >= p_i} and  \eqn{\Sigma_i > 0} (an unknown positive definite symmetric covariance matrix), for all \eqn{i = 1,...,N}.

The non-central distribution of MINUS LOG-TRANSFORMED WILK's LAMBDA STATISTIC,
say \eqn{L ~ Lambda(p,n,q,delta)}, with \eqn{L} in \eqn{(0,1)}, is specified by its characteristic function
\deqn{cf_{-log(L)}(t) = cf_LogRV_Beta(-t,n/2,q/2) * ... * cf_LogRV_Beta(-t,(n+1-p)/2,q/2) * Hypergeom1F1Mat(-i*t,-i*t+(n+q)/2,-delta/2)},
i.e. the characteristic function of the non-central distribution differs
from the central distribution by a factor specified by the confluent
hypergeometric function \eqn{1F1(a;b;X)} of a matrix argument \eqn{X},
with the complex (vector) parameters specified as \eqn{a = -i*t, b = -i*t+(n+q)/2},
and the matrix argument \eqn{X = -delta/2}, where \eqn{delta} is the non-centrality (matrix) parameter of the distribution.
}
\details{
Computing CF of the LOG-TRANSFORMED NON-CENTARL WILK's LAMBDA random
variable depends on computing the generalized hypergeometric function of matrix argument.
\code{cf_LogRV_WilksLambdaNC} uses modified implementation for computing
the truncated hypergeometric function, see the algorithm \code{HypergeompFqMat},
as originaly suggested in Koev and Edelman (2006). The truncation
of the hypergeometric series is controled by the parameter MAX (start with \eqn{MAX = 20}).
If necessary, the parameter MAX should be set to sufficiently large value but this can be numerically intractable.
If \eqn{MAX = 0} (now it is the default value), the algorithm uses the fast
(approximate) method for computing the confluent hypergeometric function
\eqn{1F1(a;b;X)}, see \code{Hypergeom1F1MatApprox}, otherwise the algorithm
uses the algorithm \code{Hypergeom1F1Mat} based on computing the truncated expansion
series of \eqn{1F1(a;b;X)} with \eqn{MAX} number of partitions.
The approximate alternative method (if \eqn{MAX = 0}) is based on heuristic
arguments (not formally proven), and the value of the confluent
hypergeometric function \eqn{1F1(a,b,X)} of a matrix argument
is calculated (approximately) as \eqn{1F1(a;b;X) ~ 1F1(a;b;x(1)) * ... * 1F1(a;b;x(p))},
where \eqn{1F1(a;b;x(1))} is the scalar value confluent hypergeometric
function \eqn{1F1(a,b,x(i))} with \eqn{(x[1],...,x[p]) = eigen(X)}.

By default (or if \code{MAX} is set to value \code{MAX = 0}), \code{cf_LogRV_WilksLambdaNC}
uses this alternative method for computing \eqn{1F1(a;b;X)}.
}
\note{
Ver.: 05-Oct-2018 11:46:29 (consistent with Matlab CharFunTool v1.3.0, 10-Aug-2018 15:46:49).
}
\examples{
## EXAMPLE 1
# CF of log of noncentral Wilks Lambda RV distribution Lambda(p,n,q,delta)
p <- 5
n <- 10 # d.f. of within SS&P
q <- 3  # d.f. of between SS&P
delta <- sort(runif(p))
coef <- 1
t <- seq(-10, 10, length.out = 201)
# MAX <- 0
cf1 <- function(t) cf_LogRV_WilksLambdaNC(t, p, n, q, delta, coef, 0)
# MAX <- 20
cf2 <- function(t) cf_LogRV_WilksLambdaNC(t, p, n, q, delta, coef, 20)
plotReIm2(list(cf1, cf2), list(t, t), title = 'CF of log of non-central Wilks Lambda RV')

## EXAMPLE 2
# CF of a weighted linear combination of minus log Wilks Lambda RVs
p <- c(5, 5, 5)
n <- c(10, 15, 20)
q <- c(3, 2, 1)
# delta <- c(sort(runif(p[1])), sort(runif(p[2])), sort(runif(p[3])))
delta <- matrix(list(runif(p[1]), runif(p[2]), runif(p[3])), 1, 3)
coef <- -c(10, 15, 20) / 45
t <- seq(-20, 20, length.out = 201)
plotReIm(function(t) {cf_LogRV_WilksLambdaNC(t, p, n, q, delta, coef)}, t,
         title = 'CF of a weighted linear combination of -log Wilks Lambda RVs')

## EXAMPLE 3
# PDF/CDF of minus log Wilks Lambda RV (p=10, n=30, q=5) from its CF
p <- 10
n <- 30
q <- 5
delta <- c(1, 2, 3, 10, 30)
coef <- -1
cf0 <- function(t) cf_LogRV_WilksLambdaNC(t, p, n, q, coef = coef)
cf <- function(t) cf_LogRV_WilksLambdaNC(t, p, n, q, delta, coef)
prob <- c(0.9, 0.95, 0.99)
options <- list()
options$xMin <- 0
result0 <- cf2DistGP(cf0, prob = prob, options = options)
result <- cf2DistGP(cf,prob = prob, options = options)
print(result)
matplot(cbind(result0$x, result$x), cbind(result0$cdf, result$cdf),
        xlab = 'x', ylab = 'CDF',
        main = expression(paste('CDFs of -log(',Lambda,') under null and alternative hypothesis')))
matplot(cbind(result0$x, result$x), cbind(result0$pdf, result$pdf),
        xlab = 'x', ylab = 'CDF',
        main = expression(paste('PDFs of -log(',Lambda,') under null and alternative hypothesis')))

## EXAMPLE 4 (Compare exact vs. simulated non-central Wilk's distribution)
# p <- 10 # p - length of the sample vectors (dimensionality)
# n <- 30 # n - sample size / degrees of freedon
# q <- 5  # q - degrees of freedom due to hypothesis model
# N <- 10000  # N - number of simulation samples
# M <- replicate(q, runif(p)) # M - the (true) mean (p x q)-matrix
# delta <- eigen(M \%*\% t(M))$values # delta - the eigenvalues of non-centrality matrix
# L <- rep(0, N)
# for(i in 1:N) {
#         X <- replicate(n, rnorm(p))
#         E <- X \%*\% t(X)
#         Y <- replicate(q, rnorm(p)) + M
#         H <- Y \%*\% t(Y)
#         L[i] <- det((E + H) / E)
# }
# # Exact and the empirical CDF of -log(L)
# cf <- function(t) cf_LogRV_WilksLambdaNC(t, p, n, q, delta, -1)
# options <- list()
# options$xMin <- 0
# options$SixSigmaRule <- 6
# prob <- c(0.9, 0.95, 0.99)
# result <- cf2DistGP(cf, prob = prob, options = options)
# Fn <- ecdf(L)
# matplot(cbind(result$x, result$x), cbind(result$cdf, Fn(result$x)),
#         xlab = "x", ylab = "CDF / ECDF",
# title = "Exact vs. empirical CDF of the non-central distribution")

}
\references{
[1] Koev, P. and Edelman, A., 2006. The efficient evaluation
of the hypergeometric function of a matrix argument.
Mathematics of Computation, 75(254), 833-846.

[2] Witkovsky, V., 2018. Exact distribution of selected multivariate test
criteria by numerical inversion of their characteristic functions.
arXiv preprint arXiv:1801.02248.
}
\seealso{
For more details see WIKIPEDIA:
https://en.wikipedia.org/wiki/Wilks%27s_lambda_distribution.

Other Continuous Probability Distribution: \code{\link{cfS_Arcsine}},
  \code{\link{cfS_Beta}}, \code{\link{cfS_Gaussian}},
  \code{\link{cfS_Rectangular}}, \code{\link{cfS_Student}},
  \code{\link{cfS_Trapezoidal}},
  \code{\link{cfS_Triangular}},
  \code{\link{cfX_ChiSquare}},
  \code{\link{cfX_Exponential}},
  \code{\link{cfX_FisherSnedecor}},
  \code{\link{cfX_Gamma}}, \code{\link{cfX_InverseGamma}},
  \code{\link{cfX_LogNormal}},
  \code{\link{cf_ArcsineSymmetric}},
  \code{\link{cf_BetaNC}}, \code{\link{cf_BetaSymmetric}},
  \code{\link{cf_Beta}}, \code{\link{cf_ChiSquare}},
  \code{\link{cf_Exponential}},
  \code{\link{cf_FisherSnedecorNC}},
  \code{\link{cf_FisherSnedecor}}, \code{\link{cf_Gamma}},
  \code{\link{cf_InverseGamma}},
  \code{\link{cf_LogRV_BetaNC}},
  \code{\link{cf_LogRV_Beta}},
  \code{\link{cf_LogRV_ChiSquareNC}},
  \code{\link{cf_LogRV_ChiSquare}},
  \code{\link{cf_LogRV_FisherSnedecorNC}},
  \code{\link{cf_LogRV_FisherSnedecor}},
  \code{\link{cf_LogRV_MeansRatioW}},
  \code{\link{cf_LogRV_MeansRatio}},
  \code{\link{cf_LogRV_WilksLambda}},
  \code{\link{cf_Normal}},
  \code{\link{cf_RectangularSymmetric}},
  \code{\link{cf_Student}},
  \code{\link{cf_TrapezoidalSymmetric}},
  \code{\link{cf_TriangularSymmetric}},
  \code{\link{cf_vonMises}}
}
