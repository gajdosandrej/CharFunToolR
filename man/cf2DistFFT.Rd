% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cf2DistFFT.R
\name{cf2DistFFT}
\alias{cf2DistFFT}
\title{Evaluating CDF/PDF/QF (quantiles) from the characteristic function CF
of a (continuous) distribution F by using the Fast Fourier Transform (FFT) algorithm}
\usage{
cf2DistFFT(cf, x, prob, options)
}
\arguments{
\item{cf}{function handle for the characteristic function CF.}

\item{x}{vector of values from domain of the distribution \eqn{F}, if \code{x} is left empty,
\code{cf2DistFFT} automatically selects vector \code{x} from the domain.}

\item{prob}{vector of values from \eqn{[0,1]} for which the quantiles
will be estimated, if \code{prob} is left empty, \code{cf2DistFFT} automatically
selects vector \code{prob = c(0.9, 0.95, 0.975, 0.99, 0.995, 0.999)}.}

\item{options}{structure (list) with the following default parameters:
\itemize{
    \item \code{options$isCompound = FALSE} treat the compound distributions, of the RV \eqn{Y = X_1 + ... + X_N},
    where \eqn{N} is discrete RV and \eqn{X\ge 0} are iid RVs from nonnegative continuous distribution,
    \item \code{options$N = 2^10} N points used by FFT,
    \item \code{options$xMin = -Inf} set the lower limit of \code{x},
    \item \code{options$xMax = Inf} set the upper limit of \code{x},
    \item \code{options$xMean = NULL} set the MEAN value of \code{x},
    \item \code{options$xStd = NULL} set the STD value of \code{x},
    \item \code{options$dt = NULL} set grid step \eqn{dt = 2*\pi/xRange},
    \item \code{options$T = NULL} set upper limit of \eqn{(0,T)}, \eqn{T = N*dt},
    \item \code{options$SixSigmaRule = 6} set the rule for computing domain,
    \item \code{options$tolDiff = 1e-4} tol for numerical differentiation,
    \item \code{options$isPlot = TRUE} plot the graphs of PDF/CDF,

    \item options$DIST                   list with information for future evaluations,
                                        \code{options$DIST} is created automatically after first call:
    \itemize{
        \item \code{options$DIST$xMin = xMin} the lower limit of \code{x},
        \item \code{options$DIST$xMax = XMax} the upper limit of \code{x},
        \item \code{options$DIST$xMean = xMean} the MEAN value of \code{x},
        \item \code{options$DIST$cft = cft} CF evaluated at \eqn{t_j} : \eqn{cf(t_j)}.
        }
    }}
}
\value{
\item{result}{structure (list) with with the following results values:}
\item{result$x = x;}
\item{result$cdf = cdf;}
\item{result$pdf = pdf;}
\item{result$prob = prob;}
\item{result$qf = qf;}
\item{result$xFTT = xFFT;}
\item{result$pdfFFT = pdfFFT;}
\item{result$cdfFFT = cdfFFT;}
\item{result$SixSigmaRule = options.SixSigmaRule;}
\item{result$N = N;}
\item{result$dt = dt;}
\item{result$T = t[length(t)];}
\item{result$PrecisionCrit = PrecisionCrit;}
\item{result$myPrecisionCrit = options.crit;}
\item{result$isPrecisionOK = isPrecisionOK;}
\item{result$xMean = xMean;}
\item{result$xStd = xStd;}
\item{result$xMin = xMin;}
\item{result$xMax = xMax;}
\item{result$cf = cf;}
\item{result$options = options;}
\item{result$tictoc = toc.}
}
\description{
TEST VERSION !
\code{cf2DistFFT(cf, x, prob, options)} evaluates the approximate values CDF(x), PDF(x),
and/or the quantiles QF(prob) for given \code{x} and \code{prob}, by interpolation
from the PDF-estimate computed by the numerical inversion of the given
characteristic function CF by using the FFT algorithm.
}
\details{
The outputs of the algorithm \code{cf2DistFFT} are approximate values!
The precission of the presented results depends on several different factors: \cr
- application of the FFT algorithm for numerical inversion of the CF \cr
- selected number of points used by the FFT algorithm (by default \code{options$N = 2^10}), \cr
- estimated/calculated domain \eqn{[A,B]} of the distribution \eqn{F}, \cr
used with the FFT algorithm. Optimally, \eqn{[A,B]} covers large part of the distribution domain,
say more than \eqn{99\%}. However, the default automatic procedure for selection of the domain
\eqn{[A,B]} may fail. It is based on the 'SixSigmaRule': \eqn{A = MEAN - SixSigmaRule * STD},
and \eqn{B = MEAN + SixSigmaRule * STD}. Alternatively, change the \code{options$SixSigmaRule}
to different value, say \eqn{12}, or use the \code{options$xMin} and \code{options$xMax} to set
manually the values of \eqn{A} and \eqn{B}.
}
\examples{
## EXAMPLE 1
## DISTRIBUTION OF A LINEAR COMBINATION OF THE INDEPENDENT RVs
## (Normal, Student's t, Rectangular, Triangular & Arcsine distribution)
## Y = X_{N} + X_{t} + 5*X_{R} + X_{T} + 10*X_{U}
## CFs: Normal, Student's t, Rectangular, Triangular, and Arcsine
cf_N  <- function(t) exp(-t^2/2)
cf_t <- function(t, nu) {min(1, Bessel::BesselK(abs(t) * sqrt(nu), nu / 2, TRUE) *
                                      exp(-abs(t) * sqrt(nu)) *
                                      (sqrt(nu) * abs(t))^(nu / 2) / 2^(nu / 2 - 1)/ gamma(nu / 2))
                        }
cf_R <- function(t) min(1, sin(t) / t)
cf_T <- function(t) min(1, (2 - 2 * cos(t)) / t^2)
cf_U <- function(t) Bessel::BesselJ(t, 0)
## Characteristic function of the linear combination Y
c <- c(1, 1, 5, 1, 10)
nu <- 1
cf_Y <- function(t) {cf_N(c[1] * t) * cf_t(c[2] * t, nu) * cf_R(c[3] * t) *
                cf_T(c[4] * t) * cf_U(c[5] * t)}
options <- list()
options$N <- 2^10
options$xMin <- -50
options$xMax <- 50
result <- cf2DistFFT(cf = cf_Y, options = options)
# title('CDF of Y = X_{N} + X_{t} + 5*X_{R} + X_{T} + 10*X_{U}')
# problems with BesselK() function...

## EXAMPLE 2
## DISTRIBUTION OF A LINEAR COMBINATION OF THE INDEPENDENT CHI2 RVs
## (Chi-squared RVs with 1 and 10 degrees of freedom)
## Y = 10*X_{Chi2_1} + X_{Chi2_10}
## Characteristic functions of X_{Chi2_1} and X_{Chi2_10}
df1 <- 1
df2 <- 10
cfChi2_1 <- function(t) (1 - 2i * t)^(-df1 / 2)
cfChi2_10 <- function(t) (1 - 2i * t)^(-df2 / 2)
cf_Y <- function(t) cfChi2_1(10 * t) * cfChi2_10(t)
options <- list()
options$xMin <- 0
result <- cf2DistFFT(cf = cf_Y, options = options)
# title('CDF of Y = 10*X_{\\chi^2_{1}} + X_{\\chi^2_{10}}')

## EXAMPLE3 (PDF/CDF of the compound Poisson-Exponential distribution)
lambda1 <- 10
lambda2 <- 5
cfX <- function(t) cfX_Exponential(t, lambda2)
cf <- function(t) cfN_Poisson(t, lambda1, cfX)
x <- seq(from = 0, to = 8, length.out = 101)
prob <- c(0.9, 0.95, 0.99)
options <- list()
options$isCompound <- 1
result <- cf2DistFFT(cf, x, prob, options)
}
\references{
[1] WITKOVSKY, V.: On the exact computation of the density and
of the quantiles of linear combinations of t and F random variables.
Journal of Statistical Planning and Inference 94 (2001), 1-13.

[2] WITKOVSKY, V.: Matlab algorithm TDIST: The distribution of a linear combination
of Student's t random variables. In COMPSTAT 2004 Symposium (2004), J. Antoch, Ed.,
Physica-Verlag/Springer 2004, Heidelberg, Germany, pp. 1995-2002.

[3] WITKOVSKY, V., WIMMER, G., DUBY, T.: Logarithmic Lambert W x F random variables
for the family of chi-squared distributions and their applications.
Statistics & Probability Letters 96 (2015), 223-231.

[4] WITKOVSKY, V. (2016): Numerical inversion of a chracteristic function:
An alternative tool to form the probability distribution of output quantity
in linear measurement models. Acta IMEKO, 5(3), 32-34.

[5] WITKOVSKY, V., WIMMER G., DUBY T. (2016): Computing the aggregate loss distribution
based on numerical inversion of the compound empirical characteristic function
of frequency and severity. Preprint submitted to Insurance: Mathematics and Economics.

[6] DUBY, T., WIMMER, G., WITKOVSKY, V. (2016): MATLAB toolbox CRM for computing distributions
of collective risk models. Preprint submitted to Journal of Statistical Software.
}
\seealso{
For more details see:
\url{https://arxiv.org/pdf/1701.08299.pdf}.

Other CF Inversion Algorithm: \code{\link{cf2DistGP}}
}
